schema {
  query: Query
  mutation: Mutation
}

input AddPhoneInput {
  model: String!
  image: String!
  clientMutationId: String!
}

type AddPhonePayload {
  newPhone: Phone
  clientMutationId: String!
}

type Mutation {
  addPhone(input: AddPhoneInput!): AddPhonePayload
  removePhone(input: RemovePhoneInput!): RemovePhonePayload
  updatePhone(input: UpdatePhoneInput!): UpdatePhonePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Phone {
  _id: String!
  model: String!
  image: String
}

type PhoneConnection {
  pageInfo: PageInfo!
  edges: [PhoneEdge]
}

type PhoneEdge {
  node: Phone
  cursor: String!
}

type Phones implements Node {
  id: ID!
  phones(after: String, first: Int, before: String, last: Int): PhoneConnection
}

type Query {
  node(id: ID!): Node
  allPhones: Phones
  phone(phoneId: String): Phone
}

input RemovePhoneInput {
  phoneId: String!
  clientMutationId: String!
}

type RemovePhonePayload {
  allPhones: Phones
  clientMutationId: String!
}

input UpdatePhoneInput {
  phoneId: String!
  phoneModel: String
  phoneImage: String
  clientMutationId: String!
}

type UpdatePhonePayload {
  allPhones: Phones
  clientMutationId: String!
}
